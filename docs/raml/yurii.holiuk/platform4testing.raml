#%RAML 1.0
title: Platform for testing
version: 1
baseUri: http://platform4testing.io/api/v1/

types:
  TestHeader:
    properties:
      id: number
      name: string
  TestHeaderArray: TestHeader[]
  Test:
    type: TestHeader
    properties:
      questions: Question[]
    example: |
      {
        "id": 1,
        "name": "JS basic test",
        "questions": [
          {
            "id": 5,
            "question": "How old are you?",
            "questionType": "text",
            "required": true,
            "answerType": "oneChoice",
            "answers": [
              {
                "id": 12,
                "answer": "Less then 20"
              },
              {
                "id": 13,
                "answer": "More then 20"
              }
            ]
          }
        ]
      }
  Question:
    properties:
      id: number
      questionType:
        enum:
          - text
          - image
          - video
      answerType:
        enum:
          - oneChoice
          - multiplyChoice
          - openAnswer
          - yesNo
      question: string
      required: boolean
      answers: Answer[]
  Answer:
    properties:
      id: number
      answer: string
    example:
      id: 5
      answer: "Colorado state"
  TestResult:
    properties:
      id: number
      questions: QuestionResult[]
  QuestionResult:
    properties:
      id: number
  OneChoiceResult:
    type: QuestionResult
    properties:
      answers: number
  MultiChoiceResult:
    type: QuestionResult
    properties:
      answers: number[]
  OpenAnswerResult:
    type: QuestionResult
    properties:
      answers: string
  YesNoResult:
    type: QuestionResult
    properties:
      answers: boolean
  Response:
    properties:
      success: boolean
      status: number
  NoDataResponse:
    type: Response
    properties:
      message: string
  Error:
    type: Response
    properties:
      error:
        properties:
          message: string

traits:
  protected:
    queryParameters:
      token: string
    responses:
      401:
        body:
          application/json:
            type: Error
            example: |
              {
                "status": 401,
                "success": false,
                "error": {
                  "message": "Authentification failed"
                }
              }

resourceTypes:
  Resource:
    get:
      is:  [protected]
      responses:
        200:
          body:
            application/json:
              type: Response
              properties:
                data:
                  type: <<item>>
        404:
          body:
            application/json:
              type: Error
              example: |
                {
                  "status": 404,
                  "success": false,
                  "error": {
                      "message": "Resource not found"
                  }
                }

/tests:
  type:  { Resource: {item : TestHeaderArray} }
  # get:
  #   responses:
  #     200:
  #       body:
  #         application/json:
  #           example: |
  #             {
  #               "success": true,
  #               "status": 200,
  #               "data": [
  #                 {
  #                   "id": 1,
  #                   "name": "JS basic test"
  #                 }
  #               ]
              # }

  /{id}:
    type:  { Resource: {item : Test} }

/admin:
  /tests:
    post:
      is:  [protected]
      body:
        application/json:
          type: Test
      responses:
        204:
          body:
            application/json:
              type: NoDataResponse
              example: |
                {
                  "status": 204,
                  "success": true,
                  "message": "Test has been created successfuly"
                }
